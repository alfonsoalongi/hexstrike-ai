# ==============================================================================
# HexStrike AI MCP Server v6.0 - Docker Compose Configuration
# ==============================================================================
# This compose file provides easy deployment of HexStrike MCP server
# with proper network capabilities and volume mounts
# ==============================================================================

version: '3.8'

services:
  hexstrike-mcp:
    # Build configuration
    build:
      context: ..
      dockerfile: docker/Dockerfile

    # Container name for easy reference
    container_name: hexstrike-mcp-server
    
    # Image name and tag
    image: hexstrike-ai:v6.0

    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - COMMAND_TIMEOUT=3600
      # - DEBUG_MODE=true
      # - MCP_PORT=8888

      # Clair API endpoint. Defaults to local Clair bound on 127.0.0.1:8080
      - CLAIR_ADDR=${CLAIR_ADDR:-http://127.0.0.1:8080}

      # Metasploit DB URL (optional). Example: postgresql://msf:msf@db.example.org:5432/msf
      - MSF_DB_URL=${MSF_DB_URL:-}

    # Volumes: persist logs and tools cache
    volumes:
      - ../logs/hexstrike.log:/opt/hexstrike/hexstrike.log:rw,Z
      - ../data/trivy:/root/.cache/trivy:rw,Z
      - ../data/wpscan:/root/.cache/wpscan/db:rw,Z
      - ../data/nuclei-templates:/root/nuclei-templates:rw,Z
      - ../data/amass:/root/.config/amass:rw,Z
      - ../data/msf:/root/.msf4:rw,Z

    # Restart policy suitable for production
    restart: unless-stopped

    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    # Give the container full host networking (required by many scanners/sniffers)
    network_mode: "host"

    # ==============================================================================
    # PRIVILEGED MODE - Maximum Tool Compatibility (127 security tools)
    # ==============================================================================
    # Enabled to guarantee all pentesting tools work without capability issues.
    # This includes: nmap, masscan, metasploit, wireshark, tcpdump, aircrack-ng,
    # docker-bench, kube-hunter, falco, volatility, gdb, radare2, etc.
    #
    # Security Note: Safe in controlled pentesting environments with network_mode: host.
    # For hardening, disable privileged and use cap_add below (require testing).
    # ==============================================================================
    privileged: true

    # ==============================================================================
    # ALTERNATIVE: Fine-grained Capabilities (if privileged: false)
    # ==============================================================================
    # Uncomment these if you disable privileged mode and want granular control.
    # Note: Some tools may still fail without privileged mode.
    # ==============================================================================
    # cap_add:
    #   - NET_RAW           # Raw sockets (nmap -sS, masscan, tcpdump, wireshark)
    #   - NET_ADMIN         # Network management (ip, ifconfig, airmon-ng, responder)
    #   - NET_BIND_SERVICE  # Bind ports < 1024 (metasploit, zaproxy, burpsuite)
    #   - NET_BROADCAST     # Broadcast packets (ARP scan, responder)
    #   - SYS_ADMIN         # Mount, namespace, advanced operations (docker-bench, containers)
    #   - SYS_PTRACE        # Debugging/tracing (gdb, strace, volatility)
    #   - SYS_CHROOT        # Chroot operations (some exploitation tools)
    #   - DAC_OVERRIDE      # Bypass file permission checks (forensics tools)
    #   - DAC_READ_SEARCH   # Bypass directory read permission checks
    #   - SETUID            # Set UID (some exploitation scenarios)
    #   - SETGID            # Set GID (some exploitation scenarios)
    #   - SETPCAP           # Set process capabilities
    #   - SYS_MODULE        # Load kernel modules (advanced wireless tools)
    #   - SYS_RAWIO         # Raw I/O (direct hardware access)
    #   - IPC_LOCK          # Lock memory (prevent swapping sensitive data)
    #   - SYS_NICE          # Change process priority

    # Security knobs for RHEL/Alma SELinux compatibility
    security_opt:
      - seccomp=unconfined  # Allow all syscalls (required for raw sockets and advanced tools)
      - apparmor=unconfined # Disable AppArmor on Debian/Ubuntu hosts
      - label=disable       # Disable SELinux labeling inside container for CentOS/RHEL hosts

    # File descriptors & shared memory (Chromium/ZAP/Burp can need bigger /dev/shm)
    ulimits:
      nofile: 65536
    shm_size: "1g"

    # Optional devices (enable if needed for USB wireless cards or VPN testing)
    # devices:
    #   - "/dev/bus/usb:/dev/bus/usb"        # USB wireless adapters (airmon-ng, kismet)
    #   - "/dev/net/tun:/dev/net/tun"        # TUN/TAP for VPN testing

  # ------------------------------------------------------------------------------
  # Clair v4 - Container image and vulnerability scanning API
  # - Default: connect to local Postgres service "hexstrike-postgres"
  # - External DB: change the connstring in ./config/clair-config.yaml to point to your external PostgreSQL
  # ------------------------------------------------------------------------------
  hexstrike-clair:
    image: quay.io/projectquay/clair:latest
    pull_policy: always
    container_name: hexstrike-clair
    restart: unless-stopped
    depends_on:
      hexstrike-postgres:
        condition: service_healthy
    environment:
      CLAIR_CONF: /etc/clair/config.yaml:ro,Z
    volumes:
      - ./config/clair-config.yaml:/etc/clair/config.yaml:ro,Z
    # no published ports and bound to 127.0.0.1
    network_mode: "host"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:6060/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ------------------------------------------------------------------------------
  # PostgreSQL 17 - Local database for Clair and optional Metasploit
  # - External DB: you can skip this service and point Clair to your external DB
  # ------------------------------------------------------------------------------
  hexstrike-postgres:
    image: docker.io/postgres:18
    pull_policy: always
    container_name: hexstrike-postgres
    restart: unless-stopped
    user: "999:999"
    environment:
      POSTGRES_PASSWORD: postgres
    # no published ports and bind to 127.0.0.1 only
    network_mode: "host"
    command: ["-c", "listen_addresses=127.0.0.1"]
    volumes:
      - ./config/db-init:/docker-entrypoint-initdb.d:ro,Z
      - ../data/postgres:/var/lib/postgresql:Z,U
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1 -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
